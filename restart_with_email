import subprocess
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import smtplib


def check_service_status(service_name):
  """Checks the status of a service (Airflow or Redis).

  Uses the `systemctl` command to get the service status.

  Args:
    service_name: The name of the service to check.

  Returns:
    str: "running" if the service is running, "stopped" if it's stopped,
         or "unknown" if the status cannot be determined.
  """

  try:
    # Shell out to systemctl to get the service status
    output = subprocess.check_output(["systemctl", "status", service_name]).decode("utf-8")
    if "active (running)" in output:
      return "running"
    elif "inactive (dead)" in output:
      return "stopped"
    else:
      return "unknown"
  except subprocess.CalledProcessError:
    # If systemctl fails, assume the status is unknown
    return "unknown"


def restart_service(service_name):
  """Restarts a service using sudo and the systemctl command.

  Uses a specific command for Redis and the generic command for Airflow services.

  Args:
    service_name: The name of the service to restart.
  """

  restart_command = []
  if service_name == "redis":
    restart_command = ["sudo", "systemctl", "start", service_name]
  else:
    restart_command = ["sudo", "systemctl", "start", f"{service_name}.service"]

  print(f"Restarting service: {' '.join(restart_command)}")  # Print the command
  subprocess.run(restart_command)
  print(f"{service_name.capitalize()} restarted successfully.")


def send_email_notification(service_name):
  """Sends an email notification about a service being down.

  **Replace the following placeholders with your actual details:**

  * sender_email: Your email address
  * receiver_email: Email address to receive notifications
  * smtp_server: SMTP server address (e.g., "smtp.gmail.com")
  * smtp_port: SMTP server port (e.g., 587 for Gmail)
  * password: Your email password (consider using app passwords)

  Args:
    service_name: The name of the down service.
  """

  sender_email = "your_email@example.com"  # Replace with your email
  receiver_email = "recipient_email@example.com"  # Replace with recipient email
  smtp_server = "smtp.example.com"  # Replace with your SMTP server
  smtp_port = 587  # Replace with your SMTP port
  password = "your_password"  # Replace with your email password (consider app passwords)

  message = MIMEMultipart()
  message["From"] = sender_email
  message["To"] = receiver_email
  message["Subject"] = f"Airflow Service Alert: {service_name} Down"

  body = f"The Airflow service {service_name} is currently down."
  message.attach(MIMEText(body, "plain"))

  try:
    server = smtplib.SMTP(smtp_server, smtp_port)
    server.starttls()
    server.login(sender_email, password)
    server.sendmail(sender_email, receiver_email, message.as_string())
    print(f"Email notification sent for {service_name} downtime.")
  except Exception as e:
    print(f"Failed to send email notification: {e}")
  finally:
    server.quit()


def main():
  services = ["airflow-scheduler", "airflow-worker", "airflow-webserver", "airflow-flower", "redis"]
  for service in services:
    status = check_service_status(service)
    if status in ("stopped", "unknown"):
      send_email_notification(service)
      restart_service(service)
    else:
      print(f"{service.capitalize()} status: {status}")


if __name__ == "__main__":
  main()
