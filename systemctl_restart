import subprocess


def check_service_status(service_name):
  """Checks the status of a service (Airflow or Redis).

  Uses the `systemctl` command to get the service status.

  Args:
    service_name: The name of the service to check.

  Returns:
    str: "running" if the service is running, "stopped" if it's stopped,
         or "unknown" if the status cannot be determined.
  """

  try:
    # Shell out to systemctl to get the service status
    output = subprocess.check_output(["systemctl", "status", service_name]).decode("utf-8")
    if "active (running)" in output:
      return "running"
    elif "inactive (dead)" in output:
      return "stopped"
    else:
      return "unknown"
  except subprocess.CalledProcessError:
    # If systemctl fails, assume the status is unknown
    return "unknown"


def restart_service(service_name):
  """Restarts a service using sudo and the systemctl command.

  Args:
    service_name: The name of the service to restart.
  """

  subprocess.run(["sudo", "systemctl", "restart", service_name])
  print(f"{service_name.capitalize()} restarted successfully.")


def main():
  services = ["airflow-scheduler", "airflow-worker", "airflow-webserver", "airflow-flower", "redis"]
  for service in services:
    status = check_service_status(service)
    if status in ("stopped", "unknown"):
      restart_service(service)
    else:
      print(f"{service.capitalize()} status: {status}")


if __name__ == "__main__":
  main()
